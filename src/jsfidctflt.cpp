/*
 * jsfidctflt.cpp
 *
 * CODE WORKS ONLY WITH VERSION 62 OF TOM LANE'S LIBRARY!
 *
 * This code is lifted straight from the IJG library and modified to add random
 * noise to the decoded DCT coefficients.  This reduces the appearance of JPEG
 * artifacts in the loaded image without costing much in terms of computation.
 * The decoded image would recompress to the same exact JPEG file.  In practice,
 * round-off error undermines this claim, but it holds pretty well in our tests.
 *
 * The idea was originated by Guillermo Sapiro of the University of Minnesota,
 * and implemented by Greg Ward <gward@lmi.net> September, 2000.
 */

/*
 * Defines below control how much noise to add to each channel.
 * Zero turns noise injection off for this channel.
 * Unity applies the full, statistically justified amount.
 */
#ifndef SF_JPEG_LUMA_NOISE
#define SF_JPEG_LUMA_NOISE	0.67f		// noise to add to luminance
#endif
#ifndef SF_JPEG_CHROMA_NOISE
#define SF_JPEG_CHROMA_NOISE	0.0f		// noise to add to chroma
#endif

/*
 * jidctflt.c
 *
 * Copyright (C) 1994-1998, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * This implementation should be more accurate than either of the integer
 * IDCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include <stdio.h>
#include <stdlib.h>
#include "jversion.h"
#include "jstreamsrc.h"
extern "C" {
#include "jdct.h"		/* Private declarations for DCT subsystem */
}

/* Private subobject for this module (borrowed from jddctmgr.c) */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* This array contains the IDCT method code that each multiplier table
   * is currently set up for, or -1 if it's not yet set up.
   * The actual multiplier tables are pointed to by dct_table in the
   * per-component comp_info structures.
   */
  int cur_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;

/* Set up decompression structure to point to us, returning false on failure
 */
bool
jpeg_sf_idct(j_decompress_ptr cinfo)
{
	if (JVERSION[0] != '6')		// check library compatibility
		return false;
	my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
	bool	didall = true;
	int	ci;
	for (ci = 0; ci < cinfo->num_components; ci++)
		if (idct->pub.inverse_DCT[ci] == jpeg_idct_float)
			idct->pub.inverse_DCT[ci] = jpeg_sf_idct_float;
		else
			didall = false;
	return didall;
}

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

#define VALUE_MAX		(FAST_FLOAT)2048	// max. dequantized magnitude

/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.  Default algorithm.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))

/* Quantization adjustment lookup tables to statistically
 * distribute final coefficients.  Each table contains an unordered sequence
 * of properly distributed random values.  A distribution is selected based
 * on recorded statistics from high-quality JPEG DCT coefficients.
 * Statistics are separated by color components.  Cb and Cr may be
 * combined due to their similar statistics.  This code gets switched
 * off if the JPEG color space is something besides YCbCr, since
 * we don't have any statistics for other color spaces.
 *
 * The distSmall tables invert the distribution Freq(x) = C0*b^2/(b^2+x^2)
 * where b = sqrt(C0/4/(C0-Ch)), C0 is the peak at x==0, and Ch is the
 * minimum at x == +/- .5  The distribution itself is sampled at equal
 * intervals of sqrt(1/b) between 0 and DIST_SMALL_DOMAIN.  Only positive
 * x values are recorded, since the distribution is symmetric.
 *
 * The distLarge tables invert the distribution Freq(x) = C + a*x, where C
 * is the central value at x==0 and a is the a constant slope over the
 * domain -.5 < x < .5  The distribution itself is sampled at equal intervals
 * of a/C between 0 and DIST_LARGE_DOMAIN.  Only the negative a/C distributions
 * are recorded, since the results are symmetric w.r.t. +/- a/C.
 *
 * The componTabQT0 table indexes the distSmall distribution tables based on
 * our gathered statistics per DCT table position and qtab[n]*normf value.
 *
 * The componTabQT table indirectly indexes the distLarge random value tables
 * based on DCT table position and coefficient*normf and qtab[n]*normf values.
 * See the function getQTindex() to see how this is implemented.
 *
 * The normalization factor (normf) is 1/DC for the Y channel and 1/VALUE_MAX
 * for chroma channels.  Using the DC level to normalize the Y channel provides
 * better resolution on our JPEG statistics.
 */

/* The tables below were generated by the ojsfidctflt.cpp module from 173 high
 * quality JPEG images.  Since the statistics from this module are generated from
 * the same dequantizer and broken out per DCT table entry, we're hoping there
 * are no scaling errors due to the efficiency scheme alluded to in Tom Lane's
 * opening comments above.
 */
#define CID_UNK			(-1)		// unsupported component
#define CID_Y			0		// Y channel index
#define CID_Cb			1		// Cb channel index
#define CID_Cr			1		// Cr channel index
#define N_CID			2		// # distinct channels
#define DIST_SMALL_DOMAIN	(FAST_FLOAT)15
#define N_DIST_SMALL		20
#define DIST_SMALL_SIZE		37
#define DIST_LARGE_DOMAIN	(FAST_FLOAT)2
#define N_DIST_LARGE		12
#define DIST_LARGE_SIZE		29
#define COMP_QT0_DOMAIN		(FAST_FLOAT)0.21
#define N_COMP_QT0		16
#define N_COMP_QT		16

static const FAST_FLOAT	distSmall[N_DIST_SMALL][DIST_SMALL_SIZE] = {
	{
		0.357821, 0.371348, 0.209176, 0.425483, 
		0.479667, 0.39841, 0.330775, 0.466116, 
		0.182173, 0.168673, 0.317256, 0.00674566, 
		0.344297, 0.128181, 0.384877, 0.493221, 
		0.141677, 0.452568, 0.290224, 0.020237, 
		0.114686, 0.195673, 0.263201, 0.0472203, 
		0.411945, 0.0337285, 0.276711, 0.249692, 
		0.236185, 0.101192, 0.222679, 0.0607124, 
		0.0742049, 0.155175, 0.087698, 0.439024, 
		0.303739, 
	}, {
		0.282249, 0.215996, 0.177603, 0.127599, 
		0.396479, 0.475047, 0.381511, 0.0785712, 
		0.242119, 0.102988, 0.268735, 0.190305, 
		0.491604, 0.0180755, 0.00602425, 0.0543024, 
		0.337872, 0.442821, 0.0301353, 0.164989, 
		0.427122, 0.0664212, 0.090758, 0.115266, 
		0.139993, 0.229, 0.352218, 0.255362, 
		0.309728, 0.323712, 0.458792, 0.042209, 
		0.152454, 0.2031, 0.29591, 0.366761, 
		0.411679, 
	}, {
		0.224962, 0.48384, 0.377789, 0.0702223, 
		0.0366485, 0.0876728, 0.453755, 0.044915, 
		0.0121566, 0.283115, 0.154769, 0.317339, 
		0.0788786, 0.0284425, 0.267432, 0.252567, 
		0.299714, 0.19974, 0.356212, 0.115068, 
		0.426284, 0.00405002, 0.212083, 0.105748, 
		0.18788, 0.401063, 0.176459, 0.0532562, 
		0.336122, 0.124605, 0.020283, 0.0966227, 
		0.144429, 0.0616869, 0.238435, 0.165434, 
		0.134383, 
	}, {
		0.0939477, 0.017774, 0.178399, 0.00252682, 
		0.0802036, 0.417261, 0.154988, 0.117111, 
		0.0737291, 0.339127, 0.00758658, 0.0334178, 
		0.206203, 0.308926, 0.191662, 0.108992, 
		0.166226, 0.0869323, 0.0498357, 0.028137, 
		0.022927, 0.0126648, 0.125699, 0.0614297, 
		0.134822, 0.46932, 0.0387841, 0.282895, 
		0.101287, 0.0442512, 0.260173, 0.240123, 
		0.0674798, 0.222258, 0.144555, 0.0555554, 
		0.374681, 
	}, {
		0.03675, 0.245281, 0.0291837, 0.0448112, 
		0.00165754, 0.126144, 0.04071, 0.107785, 
		0.0925469, 0.116505, 0.0737198, 0.0184974, 
		0.0116694, 0.0255467, 0.0490736, 0.0795597, 
		0.068239, 0.319447, 0.00497735, 0.0581759, 
		0.196998, 0.0150613, 0.0858135, 0.00831142, 
		0.0630709, 0.16273, 0.0535199, 0.148982, 
		0.0219887, 0.0998388, 0.277929, 0.374196, 
		0.178548, 0.449958, 0.136891, 0.218866, 
		0.0329133, 
	}, {
		0.0716826, 0.017838, 0.0445207, 0.100403, 
		0.330578, 0.037647, 0.0611787, 0.0409896, 
		0.0777196, 0.225893, 0.00579153, 0.0522664, 
		0.023016, 0.0314336, 0.056554, 0.0344687, 
		0.0257224, 0.0285235, 0.0153446, 0.0203917, 
		0.110109, 0.268823, 0.00813338, 0.00115473, 
		0.121358, 0.0129018, 0.427399, 0.0919197, 
		0.0844187, 0.0105009, 0.00346775, 0.0661981, 
		0.169854, 0.0482685, 0.15045, 0.194233, 
		0.134594, 
	}, {
		0.0130801, 0.0386853, 0.0188887, 0.0209588, 
		0.0454391, 0.117028, 0.0253655, 0.0759543, 
		0.0633542, 0.0419269, 0.402938, 0.0581427, 
		0.0692374, 0.0356748, 0.007693, 0.0168921, 
		0.00424148, 0.0302219, 0.0492701, 0.0277294, 
		0.22557, 0.000845554, 0.0149588, 0.0328627, 
		0.0112477, 0.0837224, 0.289704, 0.00595742, 
		0.18418, 0.103736, 0.0231135, 0.0534797, 
		0.155178, 0.133667, 0.0928414, 0.00945429, 
		0.0025394, 
	}, {
		0.00857231, 0.106987, 0.000644006, 0.0379275, 
		0.0114064, 0.0537281, 0.377623, 0.0490406, 
		0.00997112, 0.0449109, 0.0251597, 0.0591138, 
		0.0144126, 0.0653887, 0.25306, 0.0273355, 
		0.0128845, 0.0211999, 0.0728197, 0.0159986, 
		0.0296703, 0.0817916, 0.0321909, 0.0193813, 
		0.0231208, 0.00453823, 0.00193416, 0.125612, 
		0.09288, 0.0412335, 0.03493, 0.189809, 
		0.15144, 0.0072041, 0.00323077, 0.00586109, 
		0.0176515, 
	}, {
		0.0101342, 0.0215674, 0.0870893, 0.0167009, 
		0.0389664, 0.10312, 0.0254336, 0.03002, 
		0.160649, 0.0138951, 0.0234248, 0.221046, 
		0.0471502, 0.0276209, 0.00566244, 0.0427657, 
		0.125832, 0.0113388, 0.352279, 0.01259, 
		0.00253875, 0.00673874, 0.0152622, 0.0356321, 
		0.00050603, 0.0326727, 0.00783958, 0.0198394, 
		0.00460634, 0.0522853, 0.00151981, 0.00356638, 
		0.00896966, 0.0584044, 0.0658483, 0.0751343, 
		0.0182224, 
	}, {
		0.0223551, 0.00723096, 0.0347773, 0.193481, 
		0.0289084, 0.00204558, 0.0174279, 0.00371192, 
		0.00631912, 0.327522, 0.00122454, 0.000407713, 
		0.0134807, 0.0205724, 0.00817095, 0.0189376, 
		0.0477599, 0.00456331, 0.0858172, 0.016025, 
		0.0264831, 0.0243136, 0.0426606, 0.0539976, 
		0.136956, 0.00287372, 0.0101548, 0.0720095, 
		0.0123159, 0.0091438, 0.0147135, 0.105704, 
		0.0316476, 0.0384007, 0.0112099, 0.00543119, 
		0.0618328, 
	}, {
		0.169922, 0.0261816, 0.0111016, 0.0132035, 
		0.0092279, 0.0121197, 0.0354142, 0.0200726, 
		0.051665, 0.0287979, 0.0143638, 0.0101402, 
		0.00519853, 0.00835798, 0.00100708, 0.0238963, 
		0.0169678, 0.00672335, 0.000335308, 0.0184463, 
		0.00236353, 0.0603859, 0.0449958, 0.00305305, 
		0.303787, 0.00375353, 0.0318343, 0.0897453, 
		0.00594924, 0.0075248, 0.039714, 0.0156133, 
		0.0044677, 0.0723261, 0.0218765, 0.00168236, 
		0.117663, 
	}, {
		0.00929653, 0.101872, 0.00255425, 0.00699606, 
		0.0242168, 0.0437492, 0.0512783, 0.0142254, 
		0.0183624, 0.0154702, 0.0200681, 0.0101509, 
		0.00562664, 0.00314041, 0.0298376, 0.149846, 
		0.0267933, 0.00772517, 0.00497839, 0.28135, 
		0.00140742, 0.013086, 0.06166, 0.0220007, 
		0.00197731, 0.000842487, 0.00849013, 0.0380215, 
		0.00434988, 0.0335037, 0.00629796, 0.0168407, 
		0.0120356, 0.000280503, 0.0110609, 0.00373813, 
		0.07696, 
	}, {
		0.260367, 0.0143242, 0.00862263, 0.0531134, 
		0.0228461, 0.0888596, 0.0206352, 0.00167814, 
		0.0440321, 0.00119445, 0.0131546, 0.00422598, 
		0.0170824, 0.00216783, 0.00594002, 0.000714992, 
		0.0111218, 0.00721004, 0.015624, 0.0374831, 
		0.00266541, 0.000238052, 0.0187363, 0.00317284, 
		0.0666063, 0.0325215, 0.00789581, 0.012093, 
		0.0065597, 0.00477656, 0.010227, 0.00369226, 
		0.0286205, 0.00534685, 0.0254628, 0.00939708, 
		0.132733, 
	}, {
		0.000204519, 0.000614279, 0.0780568, 0.240901, 
		0.00102621, 0.00510514, 0.118118, 0.00563814, 
		0.0104034, 0.0247172, 0.00144179, 0.00678778, 
		0.011319, 0.014711, 0.00459503, 0.00619764, 
		0.0219724, 0.0134508, 0.00741341, 0.0197014, 
		0.0087951, 0.0324477, 0.00229012, 0.0041047, 
		0.00186256, 0.0581327, 0.00317261, 0.00956616, 
		0.0123284, 0.0461784, 0.00808025, 0.0161414, 
		0.0177853, 0.0281151, 0.0381856, 0.00272619, 
		0.00363137, 
	}, {
		0.00236729, 0.0245348, 0.0107198, 0.00161728, 
		0.0404851, 0.0058966, 0.0171579, 0.00538353, 
		0.00315351, 0.000533366, 0.0690196, 0.0127976, 
		0.0334081, 0.00198858, 0.00644066, 0.0116983, 
		0.000891044, 0.0191458, 0.00489719, 0.222948, 
		0.00275502, 0.0012519, 0.00831376, 0.00399071, 
		0.0215517, 0.00356469, 0.0283465, 0.00904269, 
		0.0511272, 0.0154824, 0.00984022, 0.00443396, 
		0.00017758, 0.0140463, 0.0070207, 0.00764267, 
		0.105595, 
	}, {
		0.0123313, 0.00349781, 0.00388648, 0.0047193, 
		0.0150728, 0.0079312, 0.00863188, 0.000780847, 
		0.0014173, 0.035761, 0.0249654, 0.00670177, 
		0.007291, 0.0102653, 0.0112323, 0.0094049, 
		0.0051694, 0.029459, 0.0168264, 0.206461, 
		0.000467401, 0.0189511, 0.0031243, 0.0215891, 
		0.0948228, 0.0452805, 0.0135961, 0.0024145, 
		0.00207465, 0.000155616, 0.00276382, 0.00564676, 
		0.00429273, 0.0061558, 0.0614023, 0.00174272, 
		0.00109709, 
	}, {
		0.0120323, 0.0403574, 0.01679, 0.000969236, 
		0.00417043, 0.00379329, 0.000689842, 0.054935, 
		0.00343418, 0.000137479, 0.00456842, 0.00244194, 
		0.0318025, 0.0133432, 0.0221475, 0.191366, 
		0.00183295, 0.00213325, 0.00309062, 0.0109104, 
		0.0149009, 0.0261602, 0.0855169, 0.00153966, 
		0.00125214, 0.00276051, 0.00644522, 0.00763217, 
		0.019138, 0.000412925, 0.00544083, 0.00831674, 
		0.00499058, 0.00592383, 0.00907893, 0.00701185, 
		0.00993595, 
	}, {
		0.000367424, 0.0284556, 0.00163105, 0.0197757, 
		0.00679589, 0.00527343, 0.036178, 0.00484315, 
		0.00012233, 0.000613831, 0.00371175, 0.0118931, 
		0.0132855, 0.00740625, 0.00444211, 0.0774415, 
		0.00406615, 0.00275043, 0.0149754, 0.00111419, 
		0.0107221, 0.00573798, 0.00337596, 0.00217304, 
		0.00624295, 0.0170778, 0.0233787, 0.00808601, 
		0.00189831, 0.17757, 0.000862444, 0.00972026, 
		0.0494058, 0.00245658, 0.00305625, 0.0088506, 
		0.00137005, 
	}, {
		0.00246332, 0.0022001, 0.0210129, 0.00397908, 
		0.00559349, 0.0134377, 0.00273729, 0.00364215, 
		0.0119175, 0.00122693, 0.000329035, 0.0177617, 
		0.032603, 0.0256026, 0.00332459, 0.00871382, 
		0.0446475, 0.00302373, 0.000997794, 0.00170005, 
		0.00472421, 0.0704021, 0.000549698, 0.00146069, 
		0.000109548, 0.00724682, 0.0153305, 0.00961355, 
		0.0066369, 0.00793305, 0.00608939, 0.00194613, 
		0.00433851, 0.0106657, 0.164978, 0.00077234, 
		0.0051407, 
	}, {
		0.0160377, 0.00175291, 0.00785528, 0.00221884, 
		0.00961802, 0.00153125, 0.0042563, 0.00328101, 
		0.00358466, 0.0642384, 0.00390862, 0.00110508, 
		0.00504004, 0.00029635, 0.00246567, 0.00272375, 
		0.000695626, 0.153488, 0.000898693, 0.018985, 
		0.00715055, 0.00598108, 9.86661e-05, 0.00463177, 
		0.0231524, 0.000495096, 0.0121236, 0.0405274, 
		0.00198171, 0.0107492, 0.00653132, 0.0138361, 
		0.00866765, 0.00299484, 0.00548724, 0.0295234, 
		0.00131563, 
	}, 
};

static const FAST_FLOAT	distLarge[N_DIST_LARGE][DIST_LARGE_SIZE] = {
	{
		-0.233229, 0.450246, 0.0104122, -0.128199, 
		-0.410394, 0.416966, -0.303773, 0.282943, 
		0.350136, 0.181458, 0.11333, 0.249208, 
		-0.0586924, 0.483437, -0.446153, -0.198115, 
		0.383596, -0.482023, 0.0791213, 0.147442, 
		-0.0933951, -0.0240903, 0.0448157, 0.316585, 
		-0.163106, -0.374745, 0.21538, -0.339205, 
		-0.268448, 
	}, {
		0.453786, 0.328136, -0.00323407, -0.252587, 
		-0.179682, 0.484648, -0.441378, 0.23145, 
		0.165747, 0.422708, 0.0652014, 0.132504, 
		-0.108143, 0.198727, 0.0311289, -0.037895, 
		-0.326939, 0.359888, 0.39141, -0.289577, 
		0.296149, 0.263922, -0.0728619, -0.402827, 
		-0.215959, -0.143747, 0.0989906, -0.364685, 
		-0.480351, 
	}, {
		0.427757, 0.246338, -0.0874406, 0.308161, 
		-0.123508, 0.456873, -0.35322, -0.160157, 
		0.183035, -0.394061, 0.33855, -0.235315, 
		0.214878, 0.368605, -0.27389, 0.0850588, 
		0.0175365, 0.277428, -0.0519267, -0.197415, 
		-0.016942, 0.0515301, 0.118141, 0.398337, 
		0.150794, -0.478345, -0.313178, -0.435751, 
		0.485696, 
	}, {
		-0.13967, 0.404504, -0.340138, 0.0714286, 
		0.432222, -0.297773, 0.34795, 0.459587, 
		0.319083, -0.102565, 0.136452, -0.256638, 
		0.00394661, -0.475898, -0.0308084, 0.199266, 
		-0.383851, 0.289801, -0.216633, 0.0380125, 
		-0.42905, 0.229913, -0.17767, 0.260084, 
		0.376418, 0.486611, -0.0662963, 0.104231, 
		0.168121, 
	}, {
		-0.325224, 0.487418, 0.410017, -0.371913, 
		-0.472856, 0.184441, 0.383442, -0.237801, 
		0.461988, -0.196608, 0.0245583, -0.0811322, 
		-0.0449383, 0.0906673, -0.420987, 0.243863, 
		0.329017, -0.118404, -0.0097338, 0.15384, 
		0.272749, -0.280605, -0.156856, 0.301126, 
		0.0580055, 0.436194, 0.122597, 0.356449, 
		0.214437, 
	}, {
		-0.175375, -0.023603, 0.364151, -0.308288, 
		0.0447019, 0.256777, 0.464128, -0.0965892, 
		0.170262, 0.0110788, -0.468984, -0.217429, 
		0.140073, 0.414969, 0.389778, 0.311492, 
		-0.411184, 0.284407, 0.439746, 0.109125, 
		0.0773578, -0.13517, -0.261613, 0.199745, 
		0.338064, -0.357928, 0.488133, -0.0594504, 
		0.228569, 
	}, {
		0.214048, 0.419434, -0.289195, -0.240826, 
		0.488772, 0.442938, 0.371147, -0.463921, 
		0.466044, 0.0959474, -0.195666, -0.341574, 
		0.156614, 0.320987, 0.346315, 0.185703, 
		-0.15315, 0.295132, -0.0744851, 0.0314332, 
		-0.399164, -0.0025178, 0.126719, 0.395512, 
		0.241703, 0.0642174, 0.268717, -0.0377698, 
		-0.112862, 
	}, {
		0.46777, -0.130208, 0.279751, -0.457092, 
		0.489346, -0.05236, 0.253893, 0.445821, 
		-0.0902162, 0.377519, 0.1722, 0.329693, 
		-0.218385, 0.200172, 0.113689, 0.0829808, 
		-0.267925, 0.305004, 0.353854, -0.172745, 
		0.227384, -0.384358, 0.423477, 0.0511655, 
		0.400718, 0.0181139, -0.0163305, -0.322579, 
		0.143398, 
	}, {
		0.0381228, -0.194556, 0.100906, -0.447564, 
		-0.106869, 0.213701, 0.469332, 0.159144, 
		0.186839, 0.427152, 0.314098, 0.130532, 
		0.405462, -0.0675258, 0.2398, -0.3008, 
		-0.148984, -0.244609, -0.366162, 0.360758, 
		0.265197, -0.0304709, 0.337689, 0.0701494, 
		0.289948, 0.0046542, 0.383339, 0.489865, 
		0.448435, 
	}, {
		0.345044, 0.117939, 0.200556, 0.275681, 
		0.470753, 0.173959, 0.430504, 0.409797, 
		0.322483, 0.388669, -0.0450708, 0.490336, 
		-0.169713, -0.0834598, -0.00904464, 0.0882964, 
		0.226329, 0.299376, -0.276324, 0.0573792, 
		0.25135, -0.433863, 0.0250078, -0.344092, 
		-0.124748, 0.146454, -0.219556, 0.450816, 
		0.367095, 
	}, {
		-0.318021, -0.0230961, 0.433573, 0.011733, 
		0.105553, 0.393564, -0.144296, -0.0602929, 
		-0.100418, 0.472049, 0.413772, 0.238107, 
		0.262092, 0.187868, 0.308103, -0.249521, 
		0.330228, 0.372924, 0.285406, 0.161457, 
		0.044596, -0.413928, 0.0757925, 0.351823, 
		0.134059, 0.21339, -0.193231, 0.452992, 
		0.490765, 
	}, {
		0.358082, 0.398071, 0.0933086, 0.491158, 
		0.200903, -0.00179907, -0.385858, 0.316188, 
		0.473237, 0.0633264, -0.166198, 0.417426, 
		0.454988, -0.221027, -0.0376362, -0.288403, 
		0.337391, -0.118761, -0.0763476, 0.378299, 
		0.0317224, 0.249089, 0.121896, 0.149266, 
		0.294435, 0.436391, 0.175563, 0.272086, 
		0.225385, 
	}, 
};

static const unsigned char	componTabQT0[N_CID][DCTSIZE2][N_COMP_QT0] = {
	{
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		}, {
			2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
		}, {
			2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 
		}, {
			2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 
		}, {
			2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 
		}, {
			2, 3, 4, 5, 5, 6, 7, 8, 8, 10, 10, 11, 12, 13, 14, 15, 
		}, {
			3, 4, 6, 7, 9, 11, 13, 14, 16, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 7, 12, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 
		}, {
			2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 
		}, {
			2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 
		}, {
			2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 
		}, {
			2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 
		}, {
			2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 12, 13, 14, 
		}, {
			2, 4, 5, 6, 8, 9, 11, 12, 14, 17, 19, 20, 20, 20, 20, 20, 
		}, {
			3, 6, 11, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 
		}, {
			2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 
		}, {
			2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 
		}, {
			2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 
		}, {
			2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 
		}, {
			2, 3, 4, 5, 6, 7, 7, 8, 9, 11, 11, 12, 13, 15, 17, 18, 
		}, {
			3, 4, 6, 7, 9, 11, 13, 15, 18, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 7, 13, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 
		}, {
			2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 
		}, {
			2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 
		}, {
			2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 
		}, {
			2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 
		}, {
			3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 14, 15, 17, 19, 20, 20, 
		}, {
			3, 5, 7, 9, 11, 13, 17, 19, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 9, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 
		}, {
			2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 
		}, {
			2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 
		}, {
			2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 
		}, {
			2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 20, 20, 
		}, {
			3, 4, 6, 7, 9, 10, 12, 14, 16, 19, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 5, 8, 10, 14, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 10, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 3, 4, 4, 5, 6, 7, 7, 8, 10, 10, 11, 12, 13, 14, 15, 
		}, {
			2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10, 12, 13, 13, 
		}, {
			2, 3, 4, 5, 6, 6, 7, 8, 9, 11, 11, 12, 13, 15, 17, 18, 
		}, {
			2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 14, 16, 17, 20, 20, 20, 
		}, {
			2, 4, 5, 7, 8, 10, 12, 13, 15, 18, 19, 20, 20, 20, 20, 20, 
		}, {
			3, 5, 7, 9, 11, 14, 17, 19, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 7, 11, 15, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 4, 5, 7, 8, 10, 12, 13, 16, 19, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 4, 6, 8, 10, 11, 14, 15, 17, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 5, 7, 9, 11, 14, 17, 19, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 5, 8, 11, 14, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 7, 11, 15, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 10, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			9, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 9, 15, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 8, 13, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 8, 14, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 9, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 11, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			9, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			12, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, 
	}, {
		{
			2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 
		}, {
			2, 3, 4, 5, 6, 7, 8, 9, 9, 11, 11, 12, 13, 14, 16, 16, 
		}, {
			2, 4, 5, 7, 8, 10, 11, 13, 15, 18, 19, 20, 20, 20, 20, 20, 
		}, {
			3, 5, 7, 9, 12, 15, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 7, 11, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 9, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 
		}, {
			2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 20, 20, 
		}, {
			2, 4, 5, 7, 8, 10, 12, 14, 16, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 5, 8, 10, 12, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 7, 11, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 8, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			6, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 4, 7, 8, 11, 13, 15, 16, 19, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			1, 4, 6, 7, 9, 11, 14, 16, 19, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 5, 7, 9, 13, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 6, 11, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 8, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			7, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 6, 11, 14, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			2, 6, 10, 13, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			3, 7, 13, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 8, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			6, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 12, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			4, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			6, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			6, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 12, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			5, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			7, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			12, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, {
			19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
		}, 
	}, 
};

static const float	ordinateQT[N_COMP_QT] = {
	0.00153993, 0.00237137, 0.00365174, 0.00562341, 
	0.00865964, 0.0133352, 0.0205352, 0.0316228, 
	0.0486968, 0.0749894, 0.115478, 0.177828, 
	0.273842, 0.421696, 0.649382, 1, 
};

static const unsigned char	componTabQT[N_CID][DCTSIZE2][N_COMP_QT] = {
	{
		{
			128, 128, 128, 128, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			90, 114, 107, 109, 111, 111, 108, 105, 
			102, 99, 96, 89, 81, 69, 53, 128, 
		}, {
			87, 112, 105, 109, 108, 107, 104, 101, 
			98, 93, 87, 77, 65, 51, 34, 128, 
		}, {
			90, 107, 106, 108, 106, 104, 100, 96, 
			90, 82, 73, 62, 49, 35, 16, 128, 
		}, {
			81, 106, 106, 105, 103, 99, 93, 85, 
			75, 65, 54, 42, 34, 36, 10, 128, 
		}, {
			74, 105, 106, 100, 96, 89, 80, 67, 
			55, 44, 37, 39, 35, 9, 193, 128, 
		}, {
			59, 102, 99, 91, 82, 71, 56, 43, 
			37, 40, 41, 20, 3, 128, 128, 128, 
		}, {
			38, 89, 78, 67, 54, 42, 38, 45, 
			21, 19, 52, 18, 128, 128, 128, 128, 
		}, {
			93, 120, 108, 108, 110, 111, 109, 106, 
			103, 99, 96, 89, 81, 68, 52, 128, 
		}, {
			99, 117, 109, 108, 108, 109, 108, 104, 
			101, 97, 92, 85, 75, 60, 47, 128, 
		}, {
			93, 115, 110, 106, 108, 107, 104, 100, 
			97, 92, 85, 76, 63, 48, 32, 128, 
		}, {
			85, 119, 107, 106, 107, 104, 101, 96, 
			90, 83, 73, 62, 48, 33, 22, 128, 
		}, {
			93, 109, 104, 106, 103, 100, 94, 88, 
			78, 66, 56, 41, 30, 24, 40, 128, 
		}, {
			63, 114, 108, 101, 99, 91, 84, 73, 
			59, 45, 34, 28, 24, 45, 8, 128, 
		}, {
			58, 110, 101, 92, 87, 76, 63, 47, 
			34, 31, 36, 54, 44, 15, 194, 128, 
		}, {
			43, 89, 82, 69, 56, 42, 31, 33, 
			30, 89, 47, 81, 67, 0, 128, 128, 
		}, {
			96, 116, 106, 108, 107, 106, 105, 102, 
			97, 92, 85, 74, 61, 47, 30, 128, 
		}, {
			97, 117, 112, 106, 107, 107, 104, 101, 
			97, 91, 84, 74, 60, 45, 29, 128, 
		}, {
			96, 118, 109, 106, 106, 105, 102, 96, 
			93, 85, 77, 65, 50, 35, 21, 128, 
		}, {
			85, 118, 108, 105, 105, 102, 97, 91, 
			85, 75, 64, 51, 35, 23, 16, 128, 
		}, {
			92, 106, 106, 104, 101, 97, 91, 83, 
			70, 58, 44, 31, 21, 19, 50, 128, 
		}, {
			64, 110, 107, 99, 96, 87, 79, 66, 
			50, 36, 26, 19, 20, 36, 128, 128, 
		}, {
			56, 104, 99, 91, 83, 71, 56, 40, 
			27, 22, 35, 22, 56, 128, 128, 128, 
		}, {
			39, 86, 77, 63, 49, 36, 27, 30, 
			61, 30, 101, 46, 84, 128, 128, 128, 
		}, {
			105, 113, 106, 105, 105, 103, 99, 95, 
			88, 79, 68, 55, 43, 33, 15, 128, 
		}, {
			93, 123, 111, 105, 105, 103, 100, 96, 
			89, 81, 70, 57, 43, 30, 25, 128, 
		}, {
			89, 120, 110, 104, 104, 101, 97, 92, 
			84, 74, 62, 48, 34, 21, 21, 128, 
		}, {
			104, 113, 104, 104, 101, 98, 92, 85, 
			75, 63, 50, 36, 31, 34, 80, 128, 
		}, {
			81, 115, 104, 100, 99, 91, 84, 74, 
			58, 43, 35, 29, 50, 51, 13, 128, 
		}, {
			53, 106, 109, 99, 90, 84, 71, 59, 
			43, 32, 27, 22, 29, 63, 128, 128, 
		}, {
			41, 109, 97, 86, 78, 64, 50, 37, 
			32, 23, 21, 38, 13, 128, 128, 128, 
		}, {
			32, 82, 72, 57, 44, 31, 22, 27, 
			43, 64, 36, 128, 128, 128, 128, 128, 
		}, {
			98, 114, 103, 102, 101, 98, 92, 84, 
			73, 61, 50, 41, 34, 39, 18, 128, 
		}, {
			96, 121, 106, 103, 101, 99, 93, 86, 
			76, 63, 52, 38, 32, 29, 62, 128, 
		}, {
			92, 120, 104, 102, 99, 96, 90, 81, 
			69, 57, 43, 32, 22, 38, 76, 128, 
		}, {
			81, 120, 104, 99, 98, 91, 84, 73, 
			58, 43, 35, 32, 50, 57, 17, 128, 
		}, {
			55, 118, 99, 92, 90, 78, 70, 57, 
			42, 32, 33, 42, 53, 97, 0, 128, 
		}, {
			39, 110, 104, 97, 86, 76, 61, 48, 
			38, 27, 24, 30, 39, 53, 128, 128, 
		}, {
			35, 101, 96, 81, 73, 58, 44, 34, 
			29, 22, 19, 34, 128, 128, 128, 128, 
		}, {
			23, 79, 69, 53, 38, 36, 41, 35, 
			25, 46, 15, 128, 128, 128, 128, 128, 
		}, {
			99, 102, 100, 97, 92, 85, 76, 63, 
			53, 44, 39, 49, 53, 6, 242, 128, 
		}, {
			95, 113, 100, 99, 94, 88, 80, 68, 
			55, 44, 35, 35, 27, 65, 2, 128, 
		}, {
			75, 116, 103, 95, 94, 85, 76, 63, 
			48, 35, 27, 28, 35, 49, 11, 128, 
		}, {
			70, 114, 100, 92, 91, 80, 69, 56, 
			38, 30, 38, 51, 55, 88, 90, 128, 
		}, {
			56, 109, 98, 91, 85, 72, 61, 47, 
			39, 30, 30, 36, 49, 51, 128, 128, 
		}, {
			38, 108, 96, 85, 78, 64, 50, 39, 
			33, 28, 23, 36, 48, 128, 128, 128, 
		}, {
			25, 99, 87, 76, 63, 46, 37, 34, 
			31, 24, 30, 33, 128, 128, 128, 128, 
		}, {
			16, 72, 59, 42, 36, 45, 50, 23, 
			13, 78, 63, 128, 128, 128, 128, 128, 
		}, {
			68, 96, 93, 84, 76, 65, 53, 43, 
			38, 40, 37, 76, 10, 110, 128, 128, 
		}, {
			69, 101, 95, 88, 80, 71, 60, 46, 
			34, 33, 36, 61, 52, 3, 245, 128, 
		}, {
			54, 107, 93, 86, 80, 68, 55, 45, 
			40, 30, 31, 33, 67, 37, 128, 128, 
		}, {
			44, 104, 93, 83, 76, 62, 50, 40, 
			38, 25, 28, 37, 15, 128, 128, 128, 
		}, {
			38, 98, 94, 79, 72, 58, 44, 37, 
			36, 20, 25, 70, 28, 128, 128, 128, 
		}, {
			23, 100, 89, 75, 63, 47, 37, 33, 
			31, 23, 34, 30, 128, 128, 128, 128, 
		}, {
			19, 89, 74, 59, 43, 36, 41, 39, 
			27, 20, 63, 128, 128, 128, 128, 128, 
		}, {
			9, 57, 42, 39, 53, 47, 33, 29, 
			57, 42, 128, 128, 128, 128, 128, 128, 
		}, {
			29, 79, 70, 60, 52, 44, 37, 45, 
			42, 51, 79, 12, 214, 0, 128, 128, 
		}, {
			27, 85, 77, 67, 56, 49, 46, 44, 
			29, 27, 39, 87, 39, 128, 128, 128, 
		}, {
			25, 85, 75, 64, 52, 47, 49, 44, 
			33, 36, 64, 83, 36, 128, 128, 128, 
		}, {
			21, 86, 72, 62, 48, 42, 47, 41, 
			34, 30, 46, 18, 128, 128, 128, 128, 
		}, {
			16, 84, 69, 56, 43, 43, 45, 37, 
			29, 44, 0, 128, 128, 128, 128, 128, 
		}, {
			15, 72, 59, 43, 38, 47, 53, 21, 
			28, 49, 30, 128, 128, 128, 128, 128, 
		}, {
			8, 57, 42, 41, 54, 53, 28, 30, 
			99, 14, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 38, 50, 66, 33, 27, 30, 22, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, 
	}, {
		{
			60, 156, 114, 114, 122, 110, 111, 99, 
			102, 87, 50, 41, 49, 1, 0, 128, 
		}, {
			73, 133, 93, 84, 90, 82, 71, 67, 
			59, 47, 38, 13, 3, 128, 128, 128, 
		}, {
			72, 108, 95, 80, 74, 76, 59, 54, 
			35, 23, 9, 3, 128, 128, 128, 128, 
		}, {
			80, 65, 69, 105, 57, 72, 50, 29, 
			22, 13, 5, 128, 128, 128, 128, 128, 
		}, {
			32, 109, 81, 71, 54, 47, 31, 24, 
			7, 0, 128, 128, 128, 128, 128, 128, 
		}, {
			23, 62, 107, 47, 51, 32, 24, 9, 
			0, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			15, 88, 42, 48, 29, 22, 10, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			6, 39, 42, 35, 12, 0, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			74, 135, 92, 81, 85, 74, 62, 60, 
			56, 52, 26, 8, 0, 128, 128, 128, 
		}, {
			127, 71, 125, 98, 60, 66, 71, 51, 
			42, 25, 11, 4, 128, 128, 128, 128, 
		}, {
			122, 99, 61, 76, 90, 54, 60, 44, 
			25, 15, 5, 0, 128, 128, 128, 128, 
		}, {
			64, 133, 54, 75, 59, 64, 49, 30, 
			16, 9, 0, 128, 128, 128, 128, 128, 
		}, {
			16, 154, 85, 68, 59, 49, 26, 22, 
			11, 10, 128, 128, 128, 128, 128, 128, 
		}, {
			34, 67, 65, 94, 20, 70, 28, 10, 
			2, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			14, 52, 119, 16, 83, 26, 13, 5, 
			46, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			6, 63, 32, 29, 26, 19, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			81, 107, 93, 72, 59, 59, 46, 51, 
			43, 11, 2, 128, 128, 128, 128, 128, 
		}, {
			127, 103, 60, 72, 81, 45, 51, 39, 
			19, 5, 0, 128, 128, 128, 128, 128, 
		}, {
			118, 92, 54, 76, 49, 67, 28, 33, 
			13, 5, 0, 128, 128, 128, 128, 128, 
		}, {
			25, 115, 103, 69, 61, 33, 38, 19, 
			17, 2, 128, 128, 128, 128, 128, 128, 
		}, {
			15, 145, 69, 75, 36, 41, 25, 24, 
			2, 0, 128, 128, 128, 128, 128, 128, 
		}, {
			11, 117, 63, 68, 22, 57, 32, 9, 
			8, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			10, 52, 107, 12, 96, 32, 14, 7, 
			0, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			5, 40, 42, 33, 29, 12, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			94, 59, 55, 88, 37, 50, 38, 22, 
			10, 15, 128, 128, 128, 128, 128, 128, 
		}, {
			88, 118, 46, 64, 39, 49, 36, 20, 
			9, 4, 128, 128, 128, 128, 128, 128, 
		}, {
			39, 84, 96, 58, 56, 25, 40, 16, 
			11, 0, 128, 128, 128, 128, 128, 128, 
		}, {
			18, 126, 66, 55, 59, 26, 23, 18, 
			8, 0, 128, 128, 128, 128, 128, 128, 
		}, {
			22, 61, 42, 123, 10, 89, 27, 21, 
			0, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			11, 47, 87, 72, 21, 57, 16, 13, 
			14, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			6, 57, 83, 15, 94, 21, 17, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 39, 48, 34, 33, 5, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			23, 81, 52, 42, 34, 22, 19, 54, 
			31, 18, 128, 128, 128, 128, 128, 128, 
		}, {
			30, 64, 81, 25, 17, 36, 10, 29, 
			20, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			14, 92, 61, 22, 20, 13, 16, 26, 
			0, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			8, 32, 39, 89, 7, 28, 23, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			3, 36, 56, 29, 10, 36, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 47, 90, 8, 22, 26, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 25, 44, 0, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 25, 11, 0, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			14, 43, 100, 36, 26, 20, 13, 19, 
			0, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			35, 38, 49, 90, 11, 56, 12, 2, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			7, 107, 51, 70, 14, 47, 16, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			9, 43, 86, 70, 12, 31, 2, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			4, 41, 118, 32, 27, 15, 7, 0, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 123, 75, 14, 37, 13, 8, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 90, 13, 73, 22, 2, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 34, 21, 14, 0, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			6, 94, 37, 23, 18, 9, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			8, 47, 117, 8, 45, 4, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			7, 51, 98, 5, 56, 5, 0, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			5, 54, 67, 4, 71, 0, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 108, 37, 8, 2, 0, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 79, 5, 60, 6, 0, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 3, 85, 6, 0, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 5, 0, 128, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 27, 35, 15, 5, 0, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 54, 8, 6, 0, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			2, 29, 4, 4, 0, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 16, 2, 0, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 1, 84, 0, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 0, 128, 128, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			1, 0, 128, 128, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, {
			0, 128, 128, 128, 128, 128, 128, 128, 
			128, 128, 128, 128, 128, 128, 128, 128, 
		}, 
	}, 
};

// Private class for statistical DCT table dequantization
class DCTdequantizer {
	int			cid;		// component table index
	const FLOAT_MULT_TYPE *	qtab;		// quantization table
	const JCOEF *		cblock;		// coefficient block pointer
	FAST_FLOAT		noisef;		// noise scale factor
	FAST_FLOAT		normf;		// 1/DC normalization
	const unsigned char	(*tabQT0)[N_COMP_QT0];	// indices for small values
	const unsigned char	(*tabQT)[N_COMP_QT];	// indices for normal values
	int			rub[8];		// random upper bits
	int			tabJump(int n, int siz) const
					{ return (unsigned)(rub[n>>3] ^ n) % siz; }
	bool			randNeg(int n) const
					{ return rub[n>>3] >> ((n&7)+3) & 1; }
	FAST_FLOAT		val0(int n) const;
	FAST_FLOAT		val(JCOEF iv, int n) const;
public:
	int			cpos;		// current column position	
				DCTdequantizer(jpeg_component_info *compptr=NULL,
						JCOEFPTR coef_block=NULL)
					{ SetQuantizer(compptr,coef_block); }
	bool			SetQuantizer(jpeg_component_info *compptr,
						JCOEFPTR coef_block);
	void			SetColumn(int col=0)
					{ if (col>=0 & col<DCTSIZE) cpos = col; }
	bool			AdvColumn()
					{ if (cpos >= DCTSIZE) return false;
							cpos++; return true; }
	bool			StatOK() const
					{ return cid != CID_UNK; }
	FAST_FLOAT		GetRowEntry(int row) const;
};

// Real replacement for range_limit[] lookup (0-1 output)
inline static FAST_FLOAT
real_range_limit(FAST_FLOAT fv)
{
	FAST_FLOAT	v = (fv + (FAST_FLOAT)(CENTERJSAMPLE<<3))/VALUE_MAX;
	if (v > 1.f) return 1.f;
	if (v < 0) return .0f;
	return v;
}

// Get QT table index from table for a positive, normalized component and QF
inline static int
getQTindex(const unsigned char compQT[N_COMP_QT], FAST_FLOAT fn, FAST_FLOAT qn)
{
	int	i;
	for (i = 0; i < N_COMP_QT-1; i++)	// linear search for closest
		if (fn < ordinateQT[i])
			break;
	float	Jp = (DIST_LARGE_DOMAIN/128) * ((int)(compQT[i]&0xff) - 128);
	float	interval = ordinateQT[i] - (i ? ordinateQT[i-1] : .0f);
	Jp *= qn / interval;			// adjust Jp for this interval
	if (Jp <= -DIST_LARGE_DOMAIN) return -(N_DIST_LARGE-1);
	if (Jp >= DIST_LARGE_DOMAIN) return N_DIST_LARGE-1;
	return (int)(Jp * (N_DIST_LARGE/DIST_LARGE_DOMAIN));
}

// Prepare dequantizer for this block
bool DCTdequantizer::SetQuantizer(jpeg_component_info *compptr, JCOEFPTR coef_block)
{
	SetColumn();
	normf = 0;
	for (int i = 8; i--; )
		rub[i] = rand();
	if (compptr == NULL | coef_block == NULL) {
		cid = CID_UNK;
		return false;
	}
	qtab = (FLOAT_MULT_TYPE *)compptr->dct_table;
	cblock = coef_block;
	switch (compptr->component_id) {
	case 1:			// Y component
		cid = CID_Y; break;
	case 2:			// Cb component
		cid = CID_Cb; break;
	case 3:			// Cr component
		cid = CID_Cr; break;
	default:		// RGB or CMYK or who knows what...
		cid = CID_UNK;
		return false;
	}
	if (cid == CID_Y) {
		if (SF_JPEG_LUMA_NOISE <= .01) {	// zero luminance noise
			cid = CID_UNK;
			return false;
		}
		noisef = SF_JPEG_LUMA_NOISE;
		normf = DEQUANTIZE(cblock[0],qtab[0]) + (CENTERJSAMPLE<<3);
		if (normf < 1) {
			cid = CID_UNK;			// zero DC component!
			return false;
		}
		normf = 1.f / normf;
	} else {
		if (SF_JPEG_CHROMA_NOISE <= .01) {	// zero chroma noise
			cid = CID_UNK;
			return false;
		}
		noisef = SF_JPEG_CHROMA_NOISE;
		normf = 1.f/VALUE_MAX;	// fixed chroma normalization
	}
	tabQT0 = componTabQT0[cid];
	tabQT = componTabQT[cid];
	return true;
}

// Get distributed value for a zero-quantized coefficient
inline FAST_FLOAT DCTdequantizer::val0(int n) const
{
	const unsigned char *	tab = tabQT0[n];
	FAST_FLOAT		sca = noisef;
	FAST_FLOAT		fn = qtab[n] * normf;
	int			ti;
	if (fn >= COMP_QT0_DOMAIN) {		// off QT0 look-up table
		sca *= COMP_QT0_DOMAIN / fn;
		ti = N_COMP_QT0-1;
	} else {
		ti = (int)(fn * (FAST_FLOAT)(N_COMP_QT0/COMP_QT0_DOMAIN) );
	}
	int		dsi = tab[ti];
	if (dsi >= N_DIST_SMALL) {		// distribution over-range
		dsi = ti;					// find in-range entry
		while (tab[--ti] >= N_DIST_SMALL)
			;
		sca *= (FAST_FLOAT)ti / (FAST_FLOAT)dsi;	// readjust
		dsi = tab[ti];
	}
	FAST_FLOAT	x = sca * distSmall[dsi][tabJump(n,DIST_SMALL_SIZE)];
	return randNeg(n) ? -x*qtab[n] : x*qtab[n];
}

// Get distributed value for the given coefficient
inline FAST_FLOAT DCTdequantizer::val(JCOEF iv, int n) const
{
	FAST_FLOAT	fv = DEQUANTIZE(iv, qtab[n]);
	FAST_FLOAT	fn = fv * normf;
	bool		neg, rev;
	if ((neg = iv < 0)) fn = -fn;
	int		ti = getQTindex(tabQT[n], fn, qtab[n]*normf);
	if ((rev = ti < 0)) ti = -ti;
	FAST_FLOAT	x = noisef * distLarge[ti][tabJump(n,DIST_LARGE_SIZE)];
	return neg^rev ? fv - x*qtab[n] : fv + x*qtab[n];
}

// Dequantize the specified row entry in the current column
inline FAST_FLOAT DCTdequantizer::GetRowEntry(int row) const
{
	int	n = cpos + row*DCTSIZE;
	JCOEF	iv = cblock[n];
	if (cid == CID_UNK)			// no stats for this component
		return DEQUANTIZE(iv, qtab[n]);
						// special case for iv==0
	return iv ? val(iv, n) : val0(n);
}

// Safer replacement for range_limit[] lookup
inline static int
byte_range_limit(FAST_FLOAT fv)
{
	int	v = (int)DESCALE((INT32)fv,3) + CENTERJSAMPLE;
	if (v > MAXJSAMPLE) return MAXJSAMPLE;
	if (v < 0) return 0;
	return v;
}

/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_sf_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
 // JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  DCTdequantizer	deq(compptr, coef_block);
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    deq.SetColumn(ctr);
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    if (!deq.StatOK() &&		// only simplify if dequantizer is down
    	coef_block[ctr+DCTSIZE*1] == 0 && coef_block[ctr+DCTSIZE*2] == 0 &&
	coef_block[ctr+DCTSIZE*3] == 0 && coef_block[ctr+DCTSIZE*4] == 0 &&
	coef_block[ctr+DCTSIZE*5] == 0 && coef_block[ctr+DCTSIZE*6] == 0 &&
	coef_block[ctr+DCTSIZE*7] == 0) {
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(coef_block[ctr+DCTSIZE*0], quantptr[DCTSIZE*0]);
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      quantptr++;			/* advance pointers to next column */
      wsptr++;
      continue;
    }
    /* Even part */

    if (deq.StatOK()) {
	tmp0 = deq.GetRowEntry(0);
	tmp1 = deq.GetRowEntry(2);
	tmp2 = deq.GetRowEntry(4);
	tmp3 = deq.GetRowEntry(6);
    } else {
	tmp0 = DEQUANTIZE(coef_block[ctr+DCTSIZE*0], quantptr[DCTSIZE*0]);
	tmp1 = DEQUANTIZE(coef_block[ctr+DCTSIZE*2], quantptr[DCTSIZE*2]);
	tmp2 = DEQUANTIZE(coef_block[ctr+DCTSIZE*4], quantptr[DCTSIZE*4]);
	tmp3 = DEQUANTIZE(coef_block[ctr+DCTSIZE*6], quantptr[DCTSIZE*6]);
    }

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    if (deq.StatOK()) {
	tmp4 = deq.GetRowEntry(1);	
	tmp5 = deq.GetRowEntry(3);
	tmp6 = deq.GetRowEntry(5);
	tmp7 = deq.GetRowEntry(7);
    } else {
	tmp4 = DEQUANTIZE(coef_block[ctr+DCTSIZE*1], quantptr[DCTSIZE*1]);
	tmp5 = DEQUANTIZE(coef_block[ctr+DCTSIZE*3], quantptr[DCTSIZE*3]);
	tmp6 = DEQUANTIZE(coef_block[ctr+DCTSIZE*5], quantptr[DCTSIZE*5]);
	tmp7 = DEQUANTIZE(coef_block[ctr+DCTSIZE*7], quantptr[DCTSIZE*7]);
    }

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
    wsptr[DCTSIZE*4] = tmp3 + tmp4;
    wsptr[DCTSIZE*3] = tmp3 - tmp4;

    quantptr++;			/* advance pointers to next column */
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * And testing floats for zero is relatively expensive, so we don't bother.
     */
    
    /* Even part */

    tmp10 = wsptr[0] + wsptr[4];
    tmp11 = wsptr[0] - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
    z10 = wsptr[5] - wsptr[3];
    z11 = wsptr[1] + wsptr[7];
    z12 = wsptr[1] - wsptr[7];

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */
#if 0
    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];
#else
    outptr[0] = byte_range_limit(tmp0 + tmp7);
    outptr[7] = byte_range_limit(tmp0 - tmp7);
    outptr[1] = byte_range_limit(tmp1 + tmp6);
    outptr[6] = byte_range_limit(tmp1 - tmp6);
    outptr[2] = byte_range_limit(tmp2 + tmp5);
    outptr[5] = byte_range_limit(tmp2 - tmp5);
    outptr[4] = byte_range_limit(tmp3 + tmp4);
    outptr[3] = byte_range_limit(tmp3 - tmp4);
#endif    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
